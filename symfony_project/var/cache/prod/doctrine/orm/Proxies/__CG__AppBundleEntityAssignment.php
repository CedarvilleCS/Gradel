<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Assignment extends \AppBundle\Entity\Assignment implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['problems' => NULL, 'section' => NULL, 'name' => NULL, 'description' => NULL, 'start_time' => NULL, 'end_time' => NULL, 'weight' => NULL, 'is_open' => NULL, 'is_extra_credit' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->problems, $this->section, $this->name, $this->description, $this->start_time, $this->end_time, $this->weight, $this->is_open, $this->is_extra_credit);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'problems', 'section', 'name', 'description', 'start_time', 'end_time', 'weight', 'is_open', 'is_extra_credit'];
        }

        return ['__isInitialized__', 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Assignment $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->problems, $this->section, $this->name, $this->description, $this->start_time, $this->end_time, $this->weight, $this->is_open, $this->is_extra_credit);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __construct8($sect, $nm, $desc, $start, $end, $wght, $open, $extra)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__construct8', [$sect, $nm, $desc, $start, $end, $wght, $open, $extra]);

        return parent::__construct8($sect, $nm, $desc, $start, $end, $wght, $open, $extra);
    }

    /**
     * {@inheritDoc}
     */
    public function setSection($sect)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSection', [$sect]);

        return parent::setSection($sect);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($nm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$nm]);

        return parent::setName($nm);
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($desc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$desc]);

        return parent::setDescription($desc);
    }

    /**
     * {@inheritDoc}
     */
    public function setStartTime($time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartTime', [$time]);

        return parent::setStartTime($time);
    }

    /**
     * {@inheritDoc}
     */
    public function setEndTime($time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndTime', [$time]);

        return parent::setEndTime($time);
    }

    /**
     * {@inheritDoc}
     */
    public function setWeight($wght)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeight', [$wght]);

        return parent::setWeight($wght);
    }

    /**
     * {@inheritDoc}
     */
    public function setIsOpen($open)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsOpen', [$open]);

        return parent::setIsOpen($open);
    }

    /**
     * {@inheritDoc}
     */
    public function setIsExtraCredit($credit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsExtraCredit', [$credit]);

        return parent::setIsExtraCredit($credit);
    }

    /**
     * {@inheritDoc}
     */
    public function getSection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSection', []);

        return parent::getSection();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getStartTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartTime', []);

        return parent::getStartTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getEndTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndTime', []);

        return parent::getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getWeight()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeight', []);

        return parent::getWeight();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsOpen()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsOpen', []);

        return parent::getIsOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsExtraCredit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsExtraCredit', []);

        return parent::getIsExtraCredit();
    }

}
