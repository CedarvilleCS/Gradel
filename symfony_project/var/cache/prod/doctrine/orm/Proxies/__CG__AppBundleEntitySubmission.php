<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Submission extends \AppBundle\Entity\Submission implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['testcaseresults' => NULL, 'problem' => NULL, 'team' => NULL, 'timestamp' => NULL, 'is_accepted' => NULL, 'submitted_filename' => NULL, 'submitted_filetype' => NULL, 'language' => NULL, 'percentage' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->testcaseresults, $this->problem, $this->team, $this->timestamp, $this->is_accepted, $this->submitted_filename, $this->submitted_filetype, $this->language, $this->percentage);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'testcaseresults', 'problem', 'team', 'timestamp', 'is_accepted', 'submitted_filename', 'submitted_filetype', 'language', 'percentage'];
        }

        return ['__isInitialized__', 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Submission $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->testcaseresults, $this->problem, $this->team, $this->timestamp, $this->is_accepted, $this->submitted_filename, $this->submitted_filetype, $this->language, $this->percentage);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __construct8($prob, $tm, $time, $acc, $filename, $filetype, $lang, $perc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__construct8', [$prob, $tm, $time, $acc, $filename, $filetype, $lang, $perc]);

        return parent::__construct8($prob, $tm, $time, $acc, $filename, $filetype, $lang, $perc);
    }

    /**
     * {@inheritDoc}
     */
    public function setProblem($prob)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProblem', [$prob]);

        return parent::setProblem($prob);
    }

    /**
     * {@inheritDoc}
     */
    public function setTeam($team)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTeam', [$team]);

        return parent::setTeam($team);
    }

    /**
     * {@inheritDoc}
     */
    public function setTime($time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTime', [$time]);

        return parent::setTime($time);
    }

    /**
     * {@inheritDoc}
     */
    public function updateTime($time)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTime', [$time]);

        return parent::updateTime($time);
    }

    /**
     * {@inheritDoc}
     */
    public function setIsAccepted($accept)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsAccepted', [$accept]);

        return parent::setIsAccepted($accept);
    }

    /**
     * {@inheritDoc}
     */
    public function setSubmittedFilename($subnm)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubmittedFilename', [$subnm]);

        return parent::setSubmittedFilename($subnm);
    }

    /**
     * {@inheritDoc}
     */
    public function setSubmittedFiletype($subft)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubmittedFiletype', [$subft]);

        return parent::setSubmittedFiletype($subft);
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguageId($langid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguageId', [$langid]);

        return parent::setLanguageId($langid);
    }

    /**
     * {@inheritDoc}
     */
    public function setPercentage($perc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPercentage', [$perc]);

        return parent::setPercentage($perc);
    }

    /**
     * {@inheritDoc}
     */
    public function getProblem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProblem', []);

        return parent::getProblem();
    }

    /**
     * {@inheritDoc}
     */
    public function getTeam()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTeam', []);

        return parent::getTeam();
    }

    /**
     * {@inheritDoc}
     */
    public function getTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTime', []);

        return parent::getTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getIsAccepted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsAccepted', []);

        return parent::getIsAccepted();
    }

    /**
     * {@inheritDoc}
     */
    public function getSubmittedFilename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubmittedFilename', []);

        return parent::getSubmittedFilename();
    }

    /**
     * {@inheritDoc}
     */
    public function getSubmittedFiletype()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubmittedFiletype', []);

        return parent::getSubmittedFiletype();
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguageId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguageId', []);

        return parent::getLanguageId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPercentage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPercentage', []);

        return parent::getPercentage();
    }

}
