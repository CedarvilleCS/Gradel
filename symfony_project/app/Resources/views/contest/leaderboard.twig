{% block leaderboard_html %}
<div class="card" id="leaderboard-card" style="flex-grow: 12; padding: 5px; padding-top: 10px; height: max-content;">
	
	{% if app.request.attributes.get('_route') == "contest" %}
	<div id="leaderboard-heading"> <h2> LEADERBOARD </h2> </div>
	{% endif %}
	
	<div id="leaderboard-container" class="card-contents" style="margin-top: 0;">
		<table id="leaderboard">
		
		</table>
	</div>
</div>
{% endblock %}

{# this needs a leaderboard variable #}
{% block leaderboard_tablecreation %}
	var tableHTML = "";
				
	tableHTML += "<colgroup><col class='name'>";
		
		for(var i=0; i<leaderboard.problems.length; i++){
			tableHTML += "<col class='problem'>"
		}

	tableHTML += `</colgroup>

	<tr>
		<th class="top-row no-hover">Rank</th>
		<th class="top-row no-hover">Teams</th>
		<th class="top-row no-hover">Number Correct</th>
		<th class="top-row no-hover">Penalty Time</th>`;
		
		for(var i=0; i<leaderboard.problems.length; i++){

			problem = leaderboard.problems[i];

			tableHTML += `<th class="top-row">
							<a href="{{path('contest_problem', {'contestId': current_contest.section.id, 'roundId': current_contest.id, 'problemId': ''})}}` + problem.id + `">
								` + escapeHTML(problem.name).substring(0,1) + `
							</a>
						</th>`;
		}

	tableHTML += `</tr>`;



	for(var i = 0; i<leaderboard.scores.length; i++){
		
		var team = leaderboard.scores[i];
		var id_thing = (team.team_id) ? team.team_id : team.id;
		var curr_user = (id_thing == {{(team) ? team.id : 0}});

		tableHTML += "<tr class='" + ((curr_user) ? "curr-user" : "") + "'>";
		
		tableHTML += "<td class='rank'>" + ((team.rank) ? team.rank : 1) + "</td>";
		tableHTML += "<td class='name' title='" + escapeHTML(team.member_string) + "' style='cursor: pointer'>" + escapeHTML(((team.team_name) ? team.team_name : team.name)) + "</td>";
		tableHTML += "<td class='num-correct'>" + ((team.num_correct) ? team.num_correct : 0) + "</td>";
		tableHTML += "<td class='time'>" + ((team.total_penalty) ? team.total_penalty : 0) + "</td>";
		
		if(team.attempts != null && team.results != null){

			for(var j=0; j<team.attempts.length; j++){

				var result = team.results[j];
			
				tableHTML += "<td class='" + ((result) ? "accepted" : ((team.attempts[j] > 0) ? "attempted" : "unattempted")) + "'>";
					
				tableHTML += "<div class='attempts-count'>" + ((team.attempts[j] > 0) ? team.attempts[j] : "-") + "</div>";
				tableHTML += "<div class='penalty-mins'>" + ((result) ? team.times[j] : ((team.times[j] > 0) ? "--" : "-")) + "</div>";
				
				tableHTML += "</td>";			
			}
		} else {

			for(var j=0; j<leaderboard.problems.length; j++){
				
				tableHTML += "<td class='unattempted'><div class='attempts-count'>-</div><div class='penalty-mins'>-</div></td>";

			}
		}
		tableHTML += "</tr>";
		
	}
	tableHTML += "<tr height = 5px> </tr>";
	tableHTML += "<tr class='stats-row'>";
	tableHTML += "<td><div class='attempts-count'> Correct/Total </div>";
	tableHTML += "<td><div class='empty-cell'></div></td>";
	tableHTML += "<td><div class='empty-cell'></div></td>";
	tableHTML += "<td><div class='empty-cell'></div></td>";


	if(leaderboard.attempts != null) {
		for(var i=0; i<leaderboard.attempts_per_problem_count.length; i++){
			tableHTML += "<td><div class='stats'>";
			tableHTML += leaderboard.correct_submissions_per_problem_count[i]+ "/";
			tableHTML += leaderboard.attempts_per_problem_count[i];
			
			tableHTML += "</td></div>";
		}
	} else {

		for(var i=0; i<leaderboard.problems.length; i++){
			tableHTML += "<td><div class='stats'>0/0</td></div>";
		}
	}

	$('#leaderboard').html(tableHTML);	
	
{% endblock %}



{% block leaderboard_javascript %}

	var contest_started = false;

	var freeze_override = {{(current_contest.freeze_override and current_contest.freeze_override_time) ? "true" : "false"}};
	var unfreeze_override = {{(current_contest.freeze_override and not current_contest.freeze_override_time) ? "true" : "false"}};
		
	var time = Math.floor(Date.now()/1000) - {{current_contest.start_time|date('U')}}; // current seconds into the contest
	var starttime = {{current_contest.start_time|date('U')}} - Math.floor(Date.now()/1000); // current seconds until the contest
	var total = {{current_contest.end_time|date('U')}} - {{current_contest.start_time|date('U')}}; // total length of the contest
	
	var freeze = {{current_contest.freeze_time|date('U')}} - {{current_contest.start_time|date('U')}}; // time into contest that it freezes
	
	var frozen = (Math.floor(Date.now()/1000) >= {{current_contest.freeze_time|date('U')}}) ? true : false;

	$(document).ready( function() {
			
		// freeze / unfreeze the scoreboard
		if(frozen || freeze_override){
			freezeScoreboard();
		} else {
			unfreezeScoreboard();
		}

		/* COUNTDOWN TIMER */
		$('#progressbar').progressbar({
			max: total, // total seconds in the contest
			value: time	// current seconds into the contest		
		});
					
		{% if elevatedUser %}
		$('#scoreboard-button').button().click(function() {
			postScoreboardUnfreeze();
		});
		{% endif %}
		
		/* LOOP */
		setInterval(loopFunction, 1000);
		loopFunction();
	});

		
	/* UPDATE THE LEADERBOARD */
	function updateScoreboard(leaderboard){

		{{ block('leaderboard_tablecreation', 'contest/leaderboard.twig') }}

	}	

	function freezeScoreboard(){

		frozen = true;

		if(time < freeze && !freeze_override){
			unfreeze_override = false;
			freeze_override = true;
		} else {
			unfreeze_override = false;
			freeze_override = false;
		}

		$('#progressbar-container').addClass('frozen');			
		$('#leaderboard-heading').html("<h2> <span style='color:red'> <i>FROZEN</i> LEADERBOARD </span> </h2>");						
		$('#leaderboard-card').css('border', '2pt solid red');

		$('#scoreboard-button').html("Unfreeze");
	}

	function unfreezeScoreboard(){

		frozen = false;

		if(time >= freeze && !unfreeze_override){
			unfreeze_override = true;
			freeze_override = false;
		} else {
			unfreeze_override = false;
			freeze_override = false;
		}
		
		$('#progressbar-container').removeClass('frozen');			
		$('#leaderboard-heading').html("<h2> LEADERBOARD </h2>");					
		$('#leaderboard-card').css('border', 'initial');

		$('#scoreboard-button').html("Freeze");	
	}

	
	/* LOOP FUNCTION THAT RUNS EVERY SECOND TO UPDATE TIME */
	function loopFunction(){
		
		// update the progress bar
		$( "#progressbar" ).progressbar( "option", "value", time);
		
		if (starttime < 0) {
			time++;
			var left = total-time;
		} else if(starttime == 0){
			starttime--;
			time = 0;
			var left = total;		
		} else {
			starttime--;
			// update the time left
			var left = starttime;
		}
		
		if(left <= 0){
			
			if(contest_started) {
				$('#time-left').text("FINISHED");
			} else {
				$('#time-left').text("START");
				contest_started = !contest_started;
			}
			
		} else {
			
			// display the time left
			var hours = parseInt(left/3600);
			var minutes = parseInt((left - hours*3600)/60);
			var seconds = (left - hours*3600 - minutes*60);
			
			hours = (hours < 10) ? "0"+hours : hours;
			minutes = (minutes < 10) ? "0"+minutes : minutes;
			seconds = (seconds < 10) ? "0"+seconds : seconds;
			
			
			if (starttime <= 0) {
				$('#time-left').text(hours+":"+minutes+":"+seconds+" left");
			} else {
				$('#time-left').text(hours+":"+minutes+":"+seconds+" until start");
			}			
		}


		if(!frozen){
			
			if(time > freeze && time < freeze+5){
				// ask for scoreboard freeze confirmation
				requestFrozen();
			}
		}

		if(time == 1){
			// ask for start
			requestStart();
		}
	}

	{% if elevatedUser %}
	function postScoreboardUnfreeze(){
		
		var formData = new FormData();
		
		formData.append('contestId', {{current_contest.id}});
		
		if((frozen && !unfreeze_override) || freeze_override){
			formData.append('type', 'unfreeze');				
		} else {
			formData.append('type', 'freeze');
		}
		
		$.ajax({
			type: "POST",
			url: "{{path('judging_scoreboard')}}",
			data: formData,
			processData: false,
			contentType: false,
			async: true,
		});
		
		
		return true;
	}
	{% endif %}

{% endblock %}