{% block leaderboard_html %}
<div class="card" id="leaderboard-card" style="flex-grow: 12; padding: 5px; padding-top: 10px; height: max-content;">
	
	{% if app.request.attributes.get('_route') == "contest" %}
	<div id="leaderboard-heading"> <h2> LEADERBOARD </h2> </div>
	{% endif %}
	
	<div id="leaderboard-container" class="card-contents" style="margin-top: 0;">
		<table id="leaderboard">
		
		</table>
	</div>
</div>
{% endblock %}

{# this needs a leaderboard variable #}
{% block leaderboard_tablecreation %}
	var tableHTML = "";
				
	tableHTML += "<colgroup><col class='name'>";
		
		for(var i=0; i<{{current_contest.problems|length}}; i++){
			tableHTML += "<col class='problem'>"
		}

	tableHTML += `</colgroup>

	<tr>
		<th class="top-row no-hover">Rank</th>
		<th class="top-row no-hover">Teams</th>
		<th class="top-row no-hover">Number Correct</th>
		<th class="top-row no-hover">Penalty Time</th>
		{% for problem in current_contest.problems %}
		<th class="top-row">
			<a href="{{path('contest_problem', {'contestId': problem.assignment.section.id, 'roundId': problem.assignment.id, 'problemId': problem.id})}}">
			{{problem.name|slice(0,1)}}
			</a>
		</th>
		{% endfor %}
	</tr>`;



	for(var i = 0; i<leaderboard.scores.length; i++){
		
		var team = leaderboard.scores[i];
		var curr_user = (i==leaderboard.index);

		tableHTML += "<tr class='" + ((curr_user) ? "curr-user" : "") + "'>";
		
		tableHTML += "<td class='rank'>" + team.rank + "</td>";
		tableHTML += "<td class='name' title='" + escapeHTML(team.member_string) + "' style='cursor: pointer'>" + escapeHTML(team.team_name) + "</td>";
		tableHTML += "<td class='num-correct'>" + team.num_correct + "</td>";
		tableHTML += "<td class='time'>" + team.total_penalty + "</td>";
		
		for(var j=0; j<team.attempts.length; j++){

			var result = team.results[j];
		
			tableHTML += "<td class='" + ((result) ? "accepted" : ((team.attempts[j] > 0) ? "attempted" : "unattempted")) + "'>";
				
			tableHTML += "<div class='attempts-count'>" + ((team.attempts[j] > 0) ? team.attempts[j] : "-") + "</div>";
			tableHTML += "<div class='penalty-mins'>" + ((result) ? team.times[j] : ((team.times[j] > 0) ? "--" : "-")) + "</div>";
			
			tableHTML += "</td>";
		
		}
		tableHTML += "</tr>";
		
	}			
	tableHTML += "<tr height = 5px> </tr>";
	tableHTML += "<tr class='stats-row'>";
	tableHTML += "<td><div class='attempts-count'> Correct/Total </div>";
	tableHTML += "<td><div class='empty-cell'></div></td>";
	tableHTML += "<td><div class='empty-cell'></div></td>";
	tableHTML += "<td><div class='empty-cell'></div></td>";



	for(var i=0; i<leaderboard.attempts_per_problem_count.length; i++){
		tableHTML += "<td><div class='stats'>";
		tableHTML += leaderboard.correct_submissions_per_problem_count[i]+ "/";
		tableHTML += leaderboard.attempts_per_problem_count[i];
		
		tableHTML += "</td></div>";
	}

	$('#leaderboard').html(tableHTML);	
	
{% endblock %}



{% block leaderboard_javascript %}

	var contest_started = false;
	var visual_frozen = false;
	var visual_unfrozen = false;

	var freeze_override = {{(current_contest.freeze_override and current_contest.freeze_override_time) ? "true" : "false"}};
	var unfreeze_override = {{(current_contest.freeze_override and not current_contest.freeze_override_time) ? "true" : "false"}};
		
	var time = Math.floor(Date.now()/1000) - {{current_contest.start_time|date('U')}}; // current seconds into the contest
	var starttime = {{current_contest.start_time|date('U')}} - Math.floor(Date.now()/1000); // current seconds until the contest
	var total = {{current_contest.end_time|date('U')}} - {{current_contest.start_time|date('U')}};
	var freeze = {{current_contest.freeze_time|date('U')}} - {{current_contest.start_time|date('U')}};
	
	var frozen = (Math.floor(Date.now()/1000) >= {{current_contest.freeze_time|date('U')}}) ? true : false;

	$(document).ready( function() {
			
		/* set freeze text */
		var buttonText = ((frozen && !unfreeze_override) || freeze_override) ? 'Unfreeze' : 'Freeze';
		$('#scoreboard-button').html(buttonText);
		
		/* COUNTDOWN TIMER */
		$('#progressbar').progressbar({
			max: total, // total seconds in the contest
			value: time	// current seconds into the contest		
		});
					
		{% if elevatedUser %}
		$('#scoreboard-button').button().click(function() {
			postScoreboardUnfreeze();
		});
		{% endif %}
		
		/* LOOP */
		setInterval(loopFunction, 1000);
		loopFunction();
	});

		
	/* UPDATE THE LEADERBOARD */
	function updateScoreboard(leaderboard){
		
		{{ block('leaderboard_tablecreation', 'contest/leaderboard.twig') }}

		/*
		// freeze the scoreboard?
		if(!visual_frozen && !unfreeze_override && (time >= freeze || freeze_override)){
			
			$('#progressbar-container').addClass('frozen');
			
			$('#leaderboard-heading').html("<h2> <span style='color:red'> <i>FROZEN</i> LEADERBOARD </span> </h2>");				
			
			$('#leaderboard-card').css('border', '2pt solid red');
			visual_frozen = true;
			visual_unfrozen = false;
			
			$('#scoreboard-button').html("Unfreeze");
			
		} else if(!visual_unfrozen && !freeze_override && (time < freeze || unfreeze_override)){
			
			$('#progressbar-container').removeClass('frozen');
			
			$('#leaderboard-heading').html("<h2> LEADERBOARD </h2>");			
			
			$('#leaderboard-card').css('border', 'initial');
			visual_frozen = false;
			visual_unfrozen = true;
			
			
			$('#scoreboard-button').html("Freeze");				
		}

		// update frozen
		if(time >= freeze){
			frozen = true;
		}
		*/
	}	

	
	/* LOOP FUNCTION THAT RUNS EVERY SECOND TO UPDATE THINGS */
	function loopFunction(){
		
		// update the progress bar
		$( "#progressbar" ).progressbar( "option", "value", time);
		
		if (starttime <= 0) {
			time++;
			var left = total-time;
		} else {
			starttime--;
			// update the time left
			var left = starttime;
		}
		
		if(left <= 0){
			
			if(contest_started) {
				$('#time-left').text("FINISHED");
			} else {
				$('#time-left').text("START");
				contest_started = !contest_started;
			}
			
		} else {
			
			var hours = parseInt(left/3600);
			var minutes = parseInt((left - hours*3600)/60);
			var seconds = (left - hours*3600 - minutes*60);
			
			hours = (hours < 10) ? "0"+hours : hours;
			minutes = (minutes < 10) ? "0"+minutes : minutes;
			seconds = (seconds < 10) ? "0"+seconds : seconds;
			
			
			if (starttime <= 0) {
				$('#time-left').text(hours+":"+minutes+":"+seconds+" left");
			} else {
				$('#time-left').text(hours+":"+minutes+":"+seconds+" until start");
			}
			
			
			
			if (starttime == 0) {
				window.location.reload();
			}
			
		}
	
		if(time == freeze){
		}
	}

	{% if elevatedUser %}
	function postScoreboardUnfreeze(){
		
		var formData = new FormData();
		
		formData.append('contestId', {{current_contest.id}});
		
		if((frozen && !unfreeze_override) || freeze_override){
			formData.append('type', 'unfreeze');				
		} else {
			formData.append('type', 'freeze');
		}
		
		$.ajax({
			type: "POST",
			url: "{{path('judging_scoreboard')}}",
			data: formData,
			processData: false,
			contentType: false,
			async: true,
			success: function(data){
				//console.log(data);
				
				if(data['freeze'] == true){
					freeze_override = true;
					unfreeze_override = false;
					
					$('#scoreboard-button').html("Unfreeze");
					
				} else {
					unfreeze_override = true;
					freeze_override = false;
					
					$('#scoreboard-button').html("Freeze");
				}
				
			},
			error: function(data){
	
				if(data['responseText']){					
					alert(data['responseText']);
					console.log(data['responseText']);					
				}
			}
		});
		
		
		return true;
	}
	{% endif %}

{% endblock %}