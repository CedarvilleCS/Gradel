{% block head %}
    <title>Gradel | Edit Contest</title>
    <link rel="icon" type="image/x-icon" href="{{ asset('images/logo.png') }}"/>
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/jquery-ui-timepicker-addon@1.6.3/dist/jquery-ui-timepicker-addon.css"/>
    <link rel="stylesheet" href="{{ asset('font-awesome-4.7.0/css/font-awesome.min.css') }}">

    <link rel="stylesheet" href="{{ asset('styles/styles.css') }}"/>
    <link rel="stylesheet" href="{{ asset('styles/card.css') }}"/>

    <link rel="stylesheet" href="{{ asset('styles/contest.css') }}"/>
    <link rel="stylesheet" href="{{ asset('styles/contest-hub.css') }}"/>

    <link rel="stylesheet" href="{{ asset('styles/contest-edit.css') }}"/>

    <link rel="stylesheet" href="{{ asset('styles/team-creation.css') }}">
    <link rel="stylesheet" href="{{ asset('styles/custom-toggle.css') }}">

	<link rel="stylesheet" href="{{ asset('styles/toastr.css')}}">
{% endblock %}

{% block body %}

    <body>
        {{ include('template/top-nav.html.twig') }}
        {{ include('template/section-nav.html.twig') }}
        <div id="SitePosition"
             class="hidden"
             data-pos='{
                 "start": {
                     "id": "Section-{{section.id}}",
                     "next": null
                 }
             }'></div>

        <div class="floatingControls">
            <a id="save-btn" class="floatingLink">
                <div class="floatingButton">Save</div>
            </a>
            <a id="cancel-btn" class="floatingLink">
                <div class="floatingButton">Cancel</div>
            </a>
            {% if section is not null %}
                <a id="delete-btn" class="floatingLink">
                    <div class="floatingButton deleteButton btn-delete">
                        {% if section.is_deleted %}
                            Reinstate
                        {% else %}
                            Delete
                        {% endif %}
                    </div>
                </a>
            {% endif %}
        </div>

        {# Main section with the necessary variable#}
        <section id="main" class="scrolly">

            {# Cards #}
            <div class="parallel-cards">
                <div class="card" style="flex-grow:5">
                    <div class="btn-close">
                        <h1 style="margin: 0px">
                            {% if section is not null %}
                                {{section.name}}
                            {% else %}
                                New Section
                            {% endif %}
                        </h1>
                        <h4 style="margin: 0px; margin-top: 5px;">
                            A Section of
                            <i>{{course.name}}</i>
                        </h4>
                    </div>

                    <div id="requiredFields" class="card-contents">
                        <div>

                            <div id="name-container">
                                <div>
                                    <b>Contest Name</b>
                                </div>
                                <input id="contest-name" name="contest-name" type="text" value="">
                            </div>

                            <div id="contests-container"></div>

                            <div id="languages-container">
                                <div>
                                    <b>
                                        Languages
                                    </b>
                                </div>
                                <div id="language-pool">
                                    {% for lang in languages %}
                                        <div class="language {{(section is null and (lang.name == 'Java' or lang.name == 'C++')) ? 'ui-selected' : ''}}" id="{{lang.id}}">{{lang.name}}</div>
                                    {% endfor %}
                                </div>
                            </div>

                            <div id="buttons-container">

                                <div class="toggle-container" style="margin-right: 15px">
                                    <label class="switch" style="margin-right: 5px">
                                        <input type="checkbox" id="has-pre" name="has-pre">
                                        <span class="slider round"></span>
                                    </label>
                                    <label>
                                        <b>
                                            Pre-Contest
                                        </b>
                                    </label>
                                </div>

                                <div class="toggle-container">
                                    <label class="switch" style="margin-right: 5px">
                                        <input type="checkbox" id="has-post" name="has-post">
                                        <span class="slider round"></span>
                                    </label>
                                    <label>
                                        <b>
                                            Post-Contest
                                        </b>
                                    </label>
                                </div>

                            </div>

                        </div>
                    </div>

                </div>

                {# Cards #}
                <div class="card" style="flex-grow:1">
                    <div class="btn-close">
                        <h2 style="margin: 0px">
                            Grading Options
                        </h2>
                    </div>

                    <div id="gradingOptions" class="card-contents">
                        <div>
                            <table>
                                <tr>
                                    <th>

                                        <label style="margin-bottom: 0px; display: block">Penalty Points Per...</label>
                                        <hr>

                                        <label style="width: 150px; display: inline-block;">Compilation Error</label>
                                        <input id="penalty-per-compile-error" name="penalty-per-compile-error" type="text" value="0" style="width: 100px; margin: 1px;">
                                    </br>

                                    <label style="width: 150px; display: inline-block;">Time Limit</label>
                                    <input id="penalty-per-time-limit" name="penalty-per-time-limit" type="text" value="20" style="width: 100px; margin: 1px;">
                                </br>

                                <label style="width: 150px; display: inline-block;">Runtime Error</label>
                                <input id="penalty-per-runtime-error" name="penalty-per-runtime-error" type="text" value="20" style="width: 100px; margin: 1px;">
                            </br>

                            <label style="width: 150px; display: inline-block;">Wrong Answer</label>
                            <input id="penalty-per-wrong-answer" name="penalty-per-wrong-answer" type="text" value="20" style="width: 100px; margin: 1px;">

                        </th>
                    </tr>

                </table>
            </div>
			<div id="FloatingControlsSpacer"></div>
        </div>
    </div>
</div>

{# Cards #}
<div class="card">
    <div class="btn-close">
        <h2 style="margin: 0px; margin-bottom: 5px;">
            Judges and Team Creation
        </h2>

        {# file upload#}
        <form id="studentCSVForm" action="{{path('get_contents')}}" method="post">
            <input type="file" name="file" id="file" value="Upload File">
        </form>

        <input id="new-user-input" name="new-user-input" value="Add a new user by email...">
        <div id="new-user-button">
            <img src="{{asset('images/add.png')}}" style="height: 26px">
        </div>

    </div>

    <div id="teamCreation" class="card-contents">
        <div>
            <div>
                <div id="team-pool"></div>

                <div style="display: flex; flex-direction: row; flex-grow: 1">
                    <div class="team-creation-box">
                        <h3 style="margin: 0px">Judges</h3>
                        <div id="judge-picker"></div>
                    </div>

                    <div class="team-creation-box" style="flex-grow: 3">
                        <h3 style="margin: 0px">Teams</h3>
                        <div id="team-picker"></div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="FloatingControlsSpacer"></div>
</section>
</body>

{% endblock %}

{% block scripts %}
<!-- JQuery -->
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<script src="//cdn.jsdelivr.net/npm/jquery-ui-timepicker-addon@1.6.3/dist/jquery-ui-sliderAccess.js"></script>
<script src="//cdn.jsdelivr.net/npm/jquery-ui-timepicker-addon@1.6.3/dist/jquery-ui-timepicker-addon.js"></script>

<script src="{{ asset('js/cards.js') }}"></script>
<script src="{{ asset('js/validation.js') }}"></script>

<script src="{{ asset('js/contest.js') }}"></script>

<script type="text/javascript" src="{{ asset('js/toastr/toastr.js')}}"></script>

{# asynchronous file upload #}
<script src="http://malsup.github.com/jquery.form.js"></script>

{# javascript for team creation #}
<script>

var teamIds = [];

$('.language').click(function () {

if ($(this).hasClass('ui-selected')) {
    $(this).removeClass('ui-selected');
} else {
    $(this).addClass('ui-selected');
}

});

function getUserHtml(student) {

var id = (student.id) ? student.id : 0;
var userHTML = "<div class='user' id='" + id + "'>" + escapeHTML(student.full_name) + "</div>";

return userHTML;
}

function addUser(student) {

var userHTML = getUserHtml(student);
$('#team-pool').append(userHTML);

updateActions();
}

function createTeam(ids, team) {

var id = "";
var numContests = $('.contest-row').length;
if (ids == null) {

    ids = [];

}

for (var i = ids.length; i < numContests; i++) {
    ids.push(0);
}

id = ids.join(",");

var name = (team != null) ? team.name : "Team Name";

var newTeam = $("<div>", {
    "class": "team",
    "id": id
});
newTeam.html("<input type='text' id='team-name' value='" + escapeHTML(name).replace(/'/g, "&#39") + "'> <div class='container' style='min-height: 25px'> </div> <div class='workstation-number-container'>Workstation # <input id='workstation-number' name='value'></div>");
newTeam.find('.container').droppable({
    accept: ".user",
    drop: function (event, ui) {
        $(this).append($(ui.draggable));
    }
});

if (team != null && team.users != null) {

    for (var i = 0; i < team.users.length; i++) {
        var user = $($.parseHTML(getUserHtml(team.users[i])));

        newTeam.find('.container').append(user);
    }
}

newTeam.find('#workstation-number').spinner({min: 1, max: 99});

var newval = (team != null && team.workstation_number != null) ? team.workstation_number : $('.team').length + 1;
newTeam.find('#workstation-number').spinner('value', newval);

$('#team-picker').append(newTeam);
updateActions();
}

function createCreateContestButton() {

$('#add-contest-btn').remove();

var createHtml = $('<div>', {
    "id": "add-contest-btn",
    "class": "btn"
});
createHtml.append(`Add Another Contest`);

createHtml.click(function () {
    createContest(0, "New Contest", null, null, "1", "00", false);

    $('.team').each(function () {
        var arrIds = $(this).attr('id').split(",");
        arrIds.push(0);
        $(this).attr('id', arrIds.join(","));
    });

    setValid($('#contests-container'));
});

$('#contests-container').append(createHtml);
}

function createContest(id, name, start_date, end_date, hrs, mins, no_delete) {

if (start_date == null) {
    start_date = new Date().toLocaleString();
}
if (end_date == null) {
    end_date = new Date().toLocaleString();
}

var numContests = $('.contest-row').length;

var newContestHtml = $("<div>", {
    "class": "contest-row",
    "id": id,
    "data-index": numContests + 1
});
let deleteContestButton = '';
if (!no_delete) {
    deleteContestButton = `<div class="delete-contest-btn">
                               <img src="{{asset('images/trash.png')}}">
                           </div>`;
}
newContestHtml.append(`<input class='contest-name' value="` + escapeHTML(name) + `">

								${deleteContestButton}

								<label>Start At</label>
								<input type='text' class='start-date'>

								<!--<label>End After</label>
								<input type="text" class='hr-end' value="5"> hrs <input type="text" class='min-end' value="00"> mins-->
								
								<label>End At</label>
								<input type='text' class='end-date'>

								<label>Freeze Scoreboard at</label>
								<input type="text" class='hr-freeze' value="` + escapeHTML(hrs) + `"> hrs <input type="text" class='min-freeze' value="` + escapeHTML(mins) + `"> mins
								
							`);

$('#contests-container').append(newContestHtml);

newContestHtml.find('.delete-contest-btn').hide();

newContestHtml.on('mouseenter', function () {
    $(this).find('.delete-contest-btn').show({duration: 200});
}).on('mouseleave', function () {
    $(this).find('.delete-contest-btn').hide({duration: 200});
});

newContestHtml.find('.delete-contest-btn').click(function () {

    var delIndex = $(this).parent().attr('data-index');
    console.log(delIndex);

    $(this).parent().remove();

    $('.team').each(function () {
        var arrIds = $(this).attr('id').split(",");

        arrIds.splice(delIndex - 1, 1);
        console.log(arrIds);

        $(this).attr('id', arrIds.join(","));
    });

    $('.contest-row').each(function (ind) {
        $(this).attr('data-index', ind + 1);
    });
});

/* DATE TIME PICKERS */
newContestHtml.find('.start-date, .end-date').datetimepicker({showAnim: "slideDown", selectOtherMonths: true, showOtherMonths: true, showButtonPanel: true, timeFormat: "h:mm TT"});

newContestHtml.find('.start-date').datetimepicker('setDate', start_date);
newContestHtml.find('.end-date').datetimepicker('setDate', end_date);

createCreateContestButton();
}

function updateActions() {

$('.user').draggable({
    revert: true,
    revertDuration: 0,
    start: function () {

        createTeam(null, null);

        $('#judge-picker').css('outline', '3pt solid #abef9d');
        $('.team').css('outline', '3pt solid #abef9d');

        $('#judge-picker').css('min-height', $('#team-picker').height());
    },
    stop: function () {

        $('#judge-picker').css('outline', 'none');
        $('.team').css('outline', 'none');

        // remove any teams with users
        $(".team:not(:has(.user))").remove();

        $('#judge-picker').css('min-height', $('#team-picker').height());
    }
});

$('.user').contextmenu(function (event) {
    $(this).appendTo('#team-pool');
    $(".team:not(:has(.user))").remove();

    return false;
});

$('.team').find('.container').droppable({
    accept: ".user",
    drop: function (event, ui) {
        $(this).append($(ui.draggable));
    }
});

$('#team-pool').droppable({
    accept: ".user",
    drop: function (event, ui) {
        $(this).append($(ui.draggable));
    }
});

$('#judge-picker').droppable({
    accept: ".user",
    drop: function (event, ui) {
        $(this).append($(ui.draggable));
    }
});
}

$(document).ready(function () {

{% if section is not null %}
    // populate the form with the loaded in section
    populateForm();
{% else %}
    // distribute the teams evenly
    $('#gen-team-button').click();

    createContest(0, "Practice Contest", null, null, "0", "00", true);
    createContest(0, "Actual Contest", null, null, "1", "00", true);
{% endif %}

{% if section is not null %}

    // delete the section warnings
    var warned = 0;
    $('#delete-btn').on('click', function () {

        if (warned == 2) {
            window.location = "{{path('section_delete', {'sectionId': section.id})}}";

        } else if (warned == 1) {
            $('.btn-delete').html("Are you REALLY sure? Click again to {% if section.is_deleted %} reinstate {% else %} delete {% endif %}");
        } else {
            $('.btn-delete').html("Are you sure? Click again to {% if section.is_deleted %} reinstate {% else %} delete {% endif %}");
        }

        warned++;
    });
{% endif %}

});

$('#new-user-input')
.keyup(function (event) {
    if (event.keyCode === 13) {
        $('#new-user-button').click();
    }
})
.focus(function () {
    $(this).val("");
    $(this).css('color', 'black');
    $('#new-user-button').css('background', 'grey');
})
.focusout(function () {
    $(this).css('color', 'lightgrey');
    $('#new-user-button').css('background', 'lightgrey');
});

$('#new-user-button').click(function () {

if ($('#new-user-input').val().trim() == "" || $('#new-user-input').val() == "Add a new user by email...") {
    return;
}

addUser({'id': 0, 'full_name': $('#new-user-input').val()});
$('#new-user-input').val("");
});

/* ACTION ON SAVE */
$('#save-btn').on('click', function () {

var formData = new FormData();

/* Client-Side Validation */

// section name
var contest_name = $('#contest-name').val().trim();

if (contest_name == "") {
    setInvalid($('#contest-name'));
    $('#contest-name').on('input',function(e){
      setValid($('#contest-name'));
    });
    toastr.warning("Contest name is not valid");
    return false;
} else {
    setValid($('#contest-name'));
}

formData.append('contest_name', contest_name);

var contests = [];

// make sure that the dates and individual contest info makes
var last_date = null;
var last_elem = null;
var brokenContest = false;
$('.contest-row').each(function () {

    var id = $(this).attr('id');

    var name = $(this).find('.contest-name').val();

    if (name == null || name.trim() == '') {
        var contestName = $(this).find('.contest-name');
        setInvalid(contestName);
        contestName.on('input',function(e){
            setValid(contestName);
        });
        toastr.warning('Every contest must have a name');
        brokenContest = true;
        return false;
    } else {
        setValid($(this).find('.contest-name'));
    }

    // get the start and end time
    var start_date = $(this).find('.start-date').datepicker('getDate');
    var end_date = $(this).find('.end-date').datepicker('getDate');

    if (!start_date || !end_date) {
        var startEnd = $(this).find('.start-date, .end-date');
        setInvalid(startEnd);
        startEnd.on('change',function(e){
            setValid(startEnd);
        });
        toastr.warning('Every date must have a value');
        brokenContest = true;
        return false;
    } else {
        setValid($(this).find('.start-date, .end-date'));
    }

    if (start_date >= end_date) {
        var greaterStartEnd = $(this).find('.start-date, .end-date');
        setInvalid(greaterStartEnd);
        greaterStartEnd.on('change',function(e){
            setValid(greaterStartEnd);
        });
        toastr.warning('Dates within the contest conflict with each other');
        brokenContest = true;
        return false;
    } else {
        setValid($(this).find('.start-date, .end-date'));
    }

    if (last_elem != null && last_date >= start_date) {
        var nullStartEnd = $(this).find('.start-date');
        setInvalid(nullStartEnd);
        nullStartEnd.on('change',function(e){
            setValid(nullStartEnd);
        });
        setInvalid(last_elem);
        last_elem.on('change',function(e){
            setValid(last_elem);
        });
        toastr.warning('Dates from two contests conflict with each other');
        brokenContest = true;
        return false;
    } else {
        setValid($(this).find('.start-date'));
        if (last_elem) {
            setValid(last_elem);
        }
    }

    var hour_freeze = $(this).find('.hr-freeze').val();
    var min_freeze = $(this).find('.min-freeze').val();

    if (isNaN(hour_freeze) || hour_freeze < 0) {
        var hrFreeze = $(this).find('.hr-freeze');
        setInvalid(hrFreeze);
        hrFreeze.on('input',function(e){
            setValid(hrFreeze);
        });
        toastr.warning('Hours for scoreboard freezing must be a non-negative number');
        brokenContest = true;
        return false;
    } else {
        setValid($(this).find('.hr-freeze'));
    }

    if (isNaN(min_freeze) || min_freeze < 0) {
        var minFreeze = $(this).find('.min-freeze');
        setInvalid(minFreeze);
        minFreeze.on('input',function(e){
            setValid(minFreeze);
        });
        toastr.warning('Minutes for scoreboard freezing must be a non-negative number');
        brokenContest = true;
        return false;
    } else {
        setValid($(this).find('.min-freeze'));
    }

    var contest = {
        'id': id,
        'times': [
            start_date.toLocaleString(), end_date.toLocaleString()
        ],
        'name': name,
        'hour_freeze': hour_freeze,
        'min_freeze': min_freeze
    };
    contests.push(contest);

    last_date = end_date;
    last_elem = $(this).find('.end-date');
});

if (brokenContest) {
    return false;
}

console.log("Contests:");
console.log(contests);

if (contests.length < 1) {
    setInvalid($('#contests-container'));
    $('#contests-container').on('input',function(e){
        setValid($('#contests-container'));
    });
    toastr.warning('You need at least one contest');
    return false;
} else {
    setValid($('#contests-container'));
}

formData.append('contests', JSON.stringify(contests));

if ($('#has-post').prop('checked')) {
    formData.append('post_contest', $('#has-post').attr('data-id'));
}

if ($('#has-pre').prop('checked')) {
    formData.append('pre_contest', $('#has-pre').attr('data-id'));
}

// PENALTIES
// compilation error
var pen_per_compile = $('#penalty-per-compile-error').val();
if (isNaN(pen_per_compile) || pen_per_compile < 0) {
    setInvalid($('#penalty-per-compile-error'));
    $('#penalty-per-compile-error').on('input',function(e){
        setValid($('#penalty-per-compile-error'));
    });
    toastr.warning("Penalty per Compiler Error must be a non-negative integer");
    return false;
} else {
    setValid($('#penalty-per-compile-error'));
}

// time limit error
var pen_per_time = $('#penalty-per-time-limit').val();
if (isNaN(pen_per_time) || pen_per_time < 0) {
    setInvalid($('#penalty-per-time-limit'));
    $('#penalty-per-time-limit').on('input',function(e){
            setValid($('#penalty-per-time-limit'));
        });
    toastr.warning("Penalty per Time Limit Error must be a non-negative integer");
    return false;
} else {
    setValid($('#penalty-per-time-limit'));
}

// runtime error
var pen_per_runtime = $('#penalty-per-runtime-error').val();
if (isNaN(pen_per_runtime) || pen_per_runtime < 0) {
    setInvalid($('#penalty-per-runtime-error'));
    $('#penalty-per-runtime-error').on('input',function(e){
        setValid($('#penalty-per-runtime-error'));
    });
    toastr.warning("Penalty per Runtime Error must be a non-negative integer");
    return false;
} else {
    setValid($('#penalty-per-runtime-error'));
}

// wrong answer
var pen_per_wrong = $('#penalty-per-wrong-answer').val();
if (isNaN(pen_per_wrong) || pen_per_wrong < 0) {
    setInvalid($('#penalty-per-wrong-answer'));
    $('#penalty-per-wrong-answer').on('input',function(e){
        setValid($('#penalty-per-wrong-answer'));
    });
    toastr.warning("Penalty per Wrong Answer must be a non-negative integer");
    return false;
} else {
    setValid($('#penalty-per-wrong-answer'));
}

formData.append('pen_per_compile', pen_per_compile);
formData.append('pen_per_time', pen_per_time);
formData.append('pen_per_runtime', pen_per_runtime);
formData.append('pen_per_wrong', pen_per_wrong);

// Array of Languages
var languageArr = [];
$('#language-pool .ui-selected').each(function () {
    languageArr.push($(this).attr('id'));
});

if (languageArr.length < 1) {
    setInvalid($('#language-pool'));
    $('#language-pool').on('input',function(e){
        setValid($('#language-pool'));
    });
    toastr.warning("You must select at least one language");
    return false;
} else {
    setValid($('#language-pool'));
}
formData.append('languages', JSON.stringify(languageArr));

// Array of Judges
judges = [];
$('#judge-picker .user').each(function () {

    var judge = {};
    judge.name = $(this).text().trim();
    judge.id = $(this).attr('id');

    judges.push(judge);
});

formData.append('judges', JSON.stringify(judges));

// Array of Teams
teams = [];
var brokenTeams = false;

$('#team-picker .team').each(function () {

    var team = {};
    team.name = $('#team-name', this).val().trim();
    var id = $(this).attr('id');

    id = id.split(",");
    team.id = id;

    var workstation_number = $(this).find('#workstation-number').spinner('value');

    if (workstation_number == null) {
        var workstationNum = $(this).find('#workstation-number');
        setInvalid(workstationNum);
        workstationNum.on('input',function(e){
            setValid(workstationNum);
        });
        brokenTeams = true;
    } else {
        setValid($(this).find('#workstation-number'));
    }

    team.workstation_number = workstation_number;

    team.members = [];
    $(this).find('.container').children('.user').each(function (index2) {

        var member = {};
        member.id = $(this).prop('id');
        member.name = $(this).text().trim();

        team.members.push(member);
    });

    teams.push(team);
});

if (brokenTeams) {
    return;
}

console.log("Teams:");
console.log(teams);

//console.log(teams);
formData.append('teams', JSON.stringify(teams));

// check to see if this button is allowed to be pressed
formData.append('courseId', {{course.id}});
//formData.append('contestId', {{(section) ? 0 : 0}});
formData.append('contestId', {{(section) ? section.id : 0}});

/* AJAX POST */
$.ajax({
    type: "POST",
    url: "{{path('contest_modify')}}",
    data: formData,
    processData: false,
    contentType: false,
    async: true,
    success: function (data) {
        console.log(data);
        window.location = data['redirect_url'];
    },
    error: function (data) {
        alert(data['responseText']);
        console.log(data['responseText']);
    }
});
});

$('#cancel-btn').on('click', () => {
window.history.back();
})
</script>

<script>

function getDateString(date) {

var days = date.getDate();
var month = date.getMonth() + 1;
var year = date.getFullYear();
var hours = date.getHours();
var minutes = date.getMinutes();
var seconds = date.getSeconds();

if (hours > 12) {
    apm = "PM";
    hours = hours - 12;
} else if (hours == 12) {
    apm = "PM";
} else {
    apm = "AM";
}

if (hours == 0) {
    hours = 12;
    apm = "AM";
}

str = month + "/" + days + "/" + year + " " + hours + ":" + minutes + " " + apm;

return str;
}
</script>

{% if section is not null %}
<script>
function populateForm() {

    // set the course

    // set the name
    $('#contest-name').val("{{section.name}}");

    $('#has-pre').attr('data-id', "0");
    $('#has-post').attr('data-id', "0");

    // set the contests info
    {% for asgn in section.assignments %}
        {% if not asgn.post_contest and not asgn.pre_contest %}
            {% if loop.index0 < 2 %}
                createContest({{asgn.id}}, "{{asgn.name}}", "{{asgn.start_time|date('m/d/Y h:i A')}}", "{{asgn.end_time|date('m/d/Y h:i A')}}", "{{asgn.getFreezeHour()}}", "{{asgn.getFreezeMinute()}}", true);
            {% else %}
                createContest({{asgn.id}}, "{{asgn.name}}", "{{asgn.start_time|date('m/d/Y h:i A')}}", "{{asgn.end_time|date('m/d/Y h:i A')}}", "{{asgn.getFreezeHour()}}", "{{asgn.getFreezeMinute()}}", false);
            {% endif %}
        {% elseif asgn.post_contest %}
            $('#has-post').prop('checked', true);
            $('#has-post').attr('data-id', "{{asgn.id}}");
        {% elseif asgn.pre_contest %}
            $('#has-pre').prop('checked', true);
            $('#has-pre').attr('data-id', "{{asgn.id}}");
        {% endif %}
    {% endfor %}

    // set the teams
    {% set created = false %}

    {% for masterasgn in section.assignments %}
        {% if not created and not masterasgn.post_contest and not masterasgn.pre_contest %}

            // set penalties
            $('#penalty-per-compile-error').val("{{masterasgn.penalty_per_compile_error}}");
            $('#penalty-per-time-limit').val("{{masterasgn.penalty_per_time_limit}}");
            $('#penalty-per-runtime-error').val("{{masterasgn.penalty_per_runtime_error}}");
            $('#penalty-per-wrong-answer').val("{{masterasgn.penalty_per_wrong_answer}}");

            {% set created = true %}

            {% for team in masterasgn.teams %}

                var ids = [];
                {% for asgn in section.assignments %}

                    {% if not asgn.post_contest and not asgn.pre_contest %}
                        ids.push({{asgn.teams[loop.parent.loop.index0].id}});
                    {% endif %}

                {% endfor %}

                createTeam(ids, JSON.parse("{{team|json_encode|e('js')}}"));

            {% endfor %}

        {% endif %}
    {% endfor %}

    {% for judge in judges %}
        $('#judge-picker').append($($.parseHTML(getUserHtml(JSON.parse("{{judge.user|json_encode|e('js')}}")))));
    {% endfor %}

    {% for lang in section.assignments[0].contest_languages %}
        $('#language-pool #{{lang.id}}').addClass('ui-selected');
    {% endfor %}

    updateActions();
}
</script>
{% endif %}

{{ include('contest/gas/contest_gas.html.twig') }}
{{ include('contest/gas/contest_gas_normal.html.twig') }}

{% endblock %}