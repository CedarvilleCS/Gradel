<script type="text/javascript" src="{{ asset('bundles/goswebsocket/js/gos_web_socket_client.js') }}"></script>
<script type="text/javascript" src="{{ asset('bundles/goswebsocket/js/vendor/autobahn.min.js') }}"></script>
<script type="text/javascript" src="{{ asset('js/toastr/toastr.js')}}"></script>
	
<link rel="stylesheet" href="{{ asset('styles/toastr.css')}}">

<script>
  var sessionGlob = undefined;

    window.onload = function() {

      toastr.options.progressBar = true;
      toastr.options.timeOut = 60000;
      toastr.options.extendedTimeOut = 120000
      toastr.options.positionClass = "toast-bottom-full-width";

      var webSocket = WS.connect("{{socket_domain ~ ':' ~ socket_port ~ '/'}}");
      console.log("Establishing Websocket...");

      webSocket.on("socket/connect", function(session){
          //session is an Autobahn JS WAMP session.
        console.log("SUCCESSFULLY CONNECTED");

        session.subscribe("appbundle/channel", function(uri, payload){
          try {
            
            const data = JSON.parse(payload);
            console.log(data);
          
            handleMessage(data);

          } catch(e) {

          }

        });
    
        sessionGlob = session;

        requestScoreboard();
        requestClarifications();
        requestChecklist();        
      })

      webSocket.on("socket/disconnect", function(error){

          //error provides us with some insight into the disconnection: error.reason and error.code
          console.log("Disconnected for " + error.reason + " with code " + error.code);
      })
    }
  
    function sendQuestion(msg){ 
        sessionGlob.publish("appbundle/channel", {contestId: "{{section.id}}",  scope: "question", recipients: null, msg: msg});
    }

    function sendGlobal(msg) {
      sessionGlob.publish("appbundle/channel", {contestId: "{{section.id}}", scope: "global", recipients: null, msg: msg});
    }

    function sendSpecific(msg, recipients) {
      sessionGlob.publish("appbundle/channel", {contestId: "{{section.id}}", scope: "userSpecific", recipients: recipients, msg: msg});
    }

    function requestScoreboard(){      
      sessionGlob.publish("appbundle/channel", {'type': 'scoreboard', 'contestId': {{(current_contest) ? current_contest.id : section.assignments[0].id}}, 'passKey': 'upstream'});
    }

    function requestClarifications(){      
      sessionGlob.publish("appbundle/channel", {'type': 'clarifications', 'contestId': {{(current_contest) ? current_contest.id : section.assignments[0].id}}, 'passKey': 'upstream'});
    }

    function requestChecklist(){      
      sessionGlob.publish("appbundle/channel", {'type': 'checklist', 'contestId': {{(current_contest) ? current_contest.id : section.assignments[0].id}}, 'passKey': 'upstream'});
    }

    function handleMessage(data) {
      
      type = data.type;
      submissionId = data.submissionId;
      message = data.msg;

      //message = message.replace(/\n|\r\n|\r/g, "<br/>");

      switch(type) {
        case "clarification":
          console.log("CLARIFICATION");
          
          break;

        case "scoreboard":
          console.log("SCOREBOARD");          
					
          if(typeof updateScoreboard === "function"){
            updateScoreboard(message);
          }

          break;
        
        case "clarifications":
          console.log("CLARIFICATIONS");

          if(typeof updateClarifications === "function"){
            updateClarifications(message);
          }

          break;

        case "checklist":
          console.log("CHECKLIST");

          if(typeof updateChecklist === "function"){
            updateChecklist(message);
          }

          break;

        case "delete":
        case "reject":
          console.log("REJECT or REJECT");

          var route = "{{path('problem_result', 'RESULT')}}" + submissionId;
          console.log(route);
          toastr.error("<a href='" + route + "'><div styles='display: inline-block'>" + message + "<div></a>");

          break;

        case "accept":
          console.log("ACCEPT");

          var route = "{{path('problem_result', 'RESULT')}}" + submissionId;
          console.log(route);
          toastr.info("<a href='" + route + "'><div styles='display: inline-block'>" + message + "<div></a>");

          break;

        case "refresh":
          console.log("REFRESH");
          //window.location.reload();

          break;
        
        /*
        case "updateData":
          if (typeof socketScoreboardUpdate === "function") {
            console.log("UPDATING PAGE");
           // socketScoreboardUpdate();
          }
          if (typeof socketRefreshJudging === "function") {
            console.log("UPDATING PAGE");
           // socketRefreshJudging();
          }

          break;
        */

        default:
          console.log("ERROR");

          break;
      }
    } 

</script>