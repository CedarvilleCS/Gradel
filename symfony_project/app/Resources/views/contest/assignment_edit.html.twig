{% block head %}
<title>Gradel | Edit Assignment</title>
<link rel="icon" type="image/x-icon" href="{{ asset('logo.png') }}" />
{% endblock %}


{% block body %}

<body>
    {{ include('template/top-nav.html.twig') }}
	
    {# Left Nav for Assignment Edit #}
	<nav class="nav-left">
		<a id="save-btn" class="btn"><div class="btn btn-center">Save</div></a>
		
		{% if assignment is not null %}
		<a id="delete-btn" class="btn"><div class="btn btn-center btn-delete">Delete</div></a>
		
		<ol style="padding-top: 0px">
			<li id="delete-warning" style="padding-top: 0px"></li>
		</ol>
		{% endif %}
    </nav>
	
	{{ include('template/path-nav.html.twig') }}

    {# Main section #}
	<section id="main">
		{# Cards #}

		<div class="card" style="flex-grow:3">
			
			<div class="btn-close">
				<h2 style="margin: 0px">
				{% if assignment is not null %}
					Edit {{assignment.name}}
				{% else %}
					New Assignment
				{% endif %}					
				</h2>
			</div>
		
			<div id="requiredFields" class="card-contents">
				<div>
					<table>
						<tr> <th colspan="1">
								<label for="name">Name</label>
								<input id="name" name="name" type="text" value="{{assignment.name}}" style="width: 200px">
							</th>
						</tr>
						
						<tr>
							<th colspan="2">
								<label for="startdatepicker">Start Time</label>
								<input type="text" id="opendatepicker" style="width:150px; margin-right:20px">

								<label for="enddatepicker">Finish Time</label>
								<input type="text" id="closedatepicker" style="width:150px; margin-right:20px">
								
								<label for="freeze-time">Scoreboard Freeze Time: </label>
								<i>With <input type="text" id="freeze-time-hours" style="width:60px" value="1"> Hours 
								<input type="text" id="freeze-time-minutes" style="width:60px" value="00"> Minutes Left</i>
							</th>
						</tr>	


						<tr> <th>						  
							<label style="margin-bottom: 10px; display: block">Penalty Points Per...</label>
							
							<label style="width: 150px; display: inline-block;">Compile Error</label>
							<input id="penalty_per_compile_error" name="penalty_per_compile_error" type="text" value="0" style="width: 100px; margin: 1px;">
							</br>
							 
							<label style="width: 150px; display: inline-block;">Time Limit</label>
							<input id="penalty_per_time_limit" name="penalty_per_time_limit" type="text" value="20" style="width: 100px; margin: 1px;">
							</br>
							  
							<label style="width: 150px; display: inline-block;">Runtime Error</label>
							<input id="penalty_per_runtime_error" name="penalty_per_runtime_error" type="text" value="20" style="width: 100px; margin: 1px;">
							</br>
							  
							<label style="width: 150px; display: inline-block;">Wrong Answer</label>
							<input id="penalty_per_wrong_answer" name="penalty_per_wrong_answer" type="text" value="20" style="width: 100px; margin: 1px;">
							  
						</th> </tr>							
					</table>
				</div>
			</div>
		</div>
		
		<div class="card">
			
			<div class="btn-close" onclick="collapseCard('createTeams')">
				<h2 style="margin: 0px">Team Creation
					<span style="float: right"><i class="fa fa-angle-down"></i></span>
				</h2>
			</div>
		
			<div id="createTeams" class="card-contents" style="margin-top: 0px">
				<div>
					<div id="team-pool"></div>						
					<div id="team-picker"></div>
											
					<div id="team-name-container" class="toggle-container">
						<label for="teamnames"> Team Names </label>
						<label class="switch">
							<input type="checkbox" id="team-name-checkbox" name="team-name-checkbox" checked>
							<span class="slider round"></span>
						</label>
					</div>
					
					<div class="btn" id="gen-team-button" style="margin-top: 10px; width: 150px"> Distribute Teams </div>
					
				</div>
			</div>
		</div>

		
	</section>
</body>

{% endblock %}

{% block scripts %}
   
    <script>
	
		var team_warning = false;
	

						
			
			$('#save-btn').on('click', function(){
			
				/* Client-Side Field Validation */
        
				// assignment name
				if ($.trim($('#name').val())  === '') {						
					setInvalid($('#name'));
					$('#delete-warning').html("This assignment must have a name");
					return false;
				} else {
					setValid($('#name'));
				}
				
				// assignment open time
				if ($('#opendatepicker').val()  === '') {						
					setInvalid($('#opendatepicker'));
					$('#delete-warning').html("You must assign a start time");
					return false;
				} else {
					setValid($('#opendatepicker'));
				}
				
				// assignment close time
				if ($('#closedatepicker').val()  === '') {						
					setInvalid($('#closedatepicker'));
					$('#delete-warning').html("You must assign a finish time");
					return false;
				} else {
					setValid($('#closedatepicker'));
				}
				
				// compare dates
				if ($('#closedatepicker').datepicker('getDate') < $('#opendatepicker').datepicker('getDate')){
					setInvalid($('#closedatepicker'));
					setInvalid($('#opendatepicker'));
					$('#delete-warning').html("Finish time must be after start time");
					return false;
				}
				
				
				
				
				// penalty per wrong answer
				var penWA = parseInt($('#penalty_per_wrong_answer').val());
				if(!(penWA >= 0)){						
					setInvalid($('#penalty_per_wrong_answer'));
					
					$('#delete-warning').html("Penalty per wrong answer must be a non-negative integer");
					
					return false;
				} else {
					setValid($('#penalty_per_wrong_answer'));				
				}
				// penalty per time limit
				var penTL = parseInt($('#penalty_per_time_limit').val());
				if(!(penTL >= 0)){						
					setInvalid($('#penalty_per_time_limit'));
					
					$('#delete-warning').html("Penalty per time limit must be a non-negative integer");
					
					return false;
				} else {
					setValid($('#penalty_per_time_limit'));				
				}
				// penalty per compile error
				var penCE = parseInt($('#penalty_per_compile_error').val());
				if(!(penCE >= 0)){						
					setInvalid($('#penalty_per_compile_error'));
					
					$('#delete-warning').html("Penalty per compile error must be a non-negative integer");
					
					return false;
				} else {
					setValid($('#penalty_per_compile_error'));				
				}
				
				// penalty per runtime error
				var penRE = parseInt($('#penalty_per_runtime_error').val());
				if(!(penRE >= 0)){						
					setInvalid($('#penalty_per_runtime_error'));
					
					$('#delete-warning').html("Penalty per runtime error must be a non-negative integer");
					
					return false;
				} else {
					setValid($('#penalty_per_runtime_error'));				
				}
				
				
				// teams
				if(!validateTeams() && !team_warning){
					setInvalid($('#team-picker'));	
					team_warning = true;
					
					$('#delete-warning').html("Not everyone is assigned to a team - Press save again to override");
					
					return false;
				} else {
					setValid($('#team-picker'));
				}
				
				// check to see if this button is allowed to be pressed
				if($(this).prop('disabled')){
					return false;
				} else {
					$(this).prop('disabled', true);
				}
				
				// get JSON structure for the teams
				var teamarray = getTeams();		
				console.log(teamarray);
				
				/* Post to the Symfony Route */
				$.post( "{{path('contest_modify')}}", {				
					
					name: $.trim($('#name').val()),
					description: "",
					
					open_time: $('#opendatepicker').val(),
					close_time: $('#closedatepicker').val(),
					
					freeze_time_hours: $('#freeze-time-hours').val(),
					freeze_time_mins: $('#freeze-time-minutes').val(),
					
					penalty_per_wrong_answer: $('#penalty_per_wrong_answer').val(),
					penalty_per_time_limit: $('#penalty_per_time_limit').val(),
					penalty_per_compile_error: $('#penalty_per_compile_error').val(),
					penalty_per_runtime_error: $('#penalty_per_runtime_error').val(),
					
					section: {{section.id}},
					assignment: {% if assignment is not null %} {{assignment.id}} {% else %} 0 {% endif %},
					
					teams: JSON.stringify(teamarray[0]),
					teamnames: JSON.stringify(teamarray[1]),
					teamids: JSON.stringify(teamarray[2])
					
				}, function(data) {			
					console.log(data);					
					window.location = data["redirect_url"];
					
				}).fail(function(data) {				
					alert(data["responseText"]);					
					$('#save-btn').prop('disabled', false);				
				});				
			});
		});

	function populateForm(){

		// set the name
		$('#name').val("{{assignment.name}}");
		
		// set the start time
		$('#opendatepicker').val("{{assignment.start_time|date('m/d/Y H:i')}}");		
		
		// set the finish time
		$('#closedatepicker').val("{{assignment.end_time|date('m/d/Y H:i')}}");		
		
		// set the finish time
		$('#freeze-time-hours').val("{{hoursLeft}}");
		$('#freeze-time-minutes').val("{{minutesLeft}}");
				
		// set the penalties
		$('#penalty_per_wrong_answer').val({{assignment.penalty_per_wrong_answer}});
		$('#penalty_per_time_limit').val({{assignment.penalty_per_time_limit}});
		$('#penalty_per_compile_error').val({{assignment.penalty_per_compile_error}});
		$('#penalty_per_runtime_error').val({{assignment.penalty_per_runtime_error}});
		
		// set the teams
		var teams_str = '{{assignment.teams.toArray()|json_encode|e('js')}}';
		var teams = JSON.parse(teams_str);
		
		console.log(teams);
		for(var i=0; i<teams.length; i++){
			for(var j=0; j<teams[i].users.length; j++){
				$('#team-pool #'+teams[i].users[j].id).remove();
			}
		
			//$('#team-pool .user').remove();
			
			var newTeam = $("<div>", {"class": "team", "id": teams[i].id});
			newTeam.html("<input type='text' id='team-name' value='"+teams[i].name+"'>");
			
			newTeam.droppable({
				accept: ".user",
				drop: function(event, ui) {						
					$(this).append($(ui.draggable));								
				}
			});				
		
			$('#team-picker').append(newTeam);
						
			for(var j=0; j<teams[i].users.length; j++){
			
				var newUser = $("<div>", {"class": "user", "id": teams[i].users[j].id});
				newUser.html(teams[i].users[j].first_name + " " + teams[i].users[j].last_name);
				
				newTeam.append(newUser);			
			}			
		}
		
		createTeamEvents();
		toggleTeamOptions();
		
	}
	
{% endblock %}
