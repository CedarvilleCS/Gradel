{% block head %}
<title>Gradel | Edit Assignment</title>
<link rel="icon" type="image/x-icon" href="{{ asset('images/logo.png') }}" />
{% endblock %}

{% block stylesheets %}
	<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
	<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/jquery-ui-timepicker-addon@1.6.3/dist/jquery-ui-timepicker-addon.css" />
	
    <link rel="stylesheet" href="{{ asset('styles/styles.css') }}" />
    <link rel="stylesheet" href="{{ asset('styles/card.css') }}" />
	
	<link rel="stylesheet" href="{{ asset('styles/team-creation.css') }}">
	<link rel="stylesheet" href="{{ asset('styles/custom-toggle.css') }}">

	<link rel="stylesheet" href="{{ asset('styles/toastr.css')}}">
	
	<link rel="stylesheet" href="{{ asset('font-awesome-4.7.0/css/font-awesome.min.css') }}">
{% endblock %}


{% block body %}

<body>
    {{ include('template/top-nav.html.twig') }}
	
    {# Left Nav for Assignment Edit #}
	<nav class="nav-left">
		<a id="save-btn" class="btn"><div class="btn btn-center">Save</div></a>

		<div class="btn btn-center" id="cancel-btn">Cancel</div>
		
		{% if assignment is not null %}
		<a id="delete-btn" class="btn"><div class="btn btn-center btn-delete">Delete</div></a>		
		{% endif %}
		
		<ol style="padding-top: 0px">
			<li id="delete-warning" style="padding-top: 0px"></li>
		</ol>

		{% if assignment is not null %}
		<a id="subs-btn" class="btn"><div class="btn btn-center btn-delete">Clear Submissions</div></a>	
		<a id="trials-btn" class="btn"><div class="btn btn-center btn-delete">Clear Saved Code</div></a>		
		{% endif %}

    </nav>
	
	{{ include('template/path-nav.html.twig') }}

    {# Main section #}
	<section id="main">
		{# Cards #}

		<div class="parallel-cards">
			<div class="card" style="flex-grow:3">
				
				<div class="btn-close">
					<h2 style="margin: 0px">
					{% if assignment is not null %}
						Edit {{assignment.name}}
					{% else %}
						New Assignment
					{% endif %}					
					</h2>
				</div>
			
				<div id="requiredFields" class="card-contents">
					<div>
						<table>
							<tr> <th colspan="1">
									<label for="name">Name</label>
									<input id="name" name="name" type="text" value="{{assignment.name}}" style="width: 200px">
								</th>
							</tr>
							
							<tr>
								<th colspan="2">
									<label for="startdatepicker">Open Date</label>
									<input type="text" id="opendatepicker" style="width:150px; margin-right:20px">

									<label for="enddatepicker">Close Date</label>
									<input type="text" id="closedatepicker" style="width:150px; margin-right:20px">
									
									<label for="cutoffdatepicker">Cutoff Date</label>
									<input type="text" id="cutoffdatepicker" style="width: 150px">
								</th>
							</tr>
							
							<tr> <th>
								<div style="display:flex; justify-content:space-between; align-items: center">
									<span><label for="weight">Weight </label> <input id="weight" name="weight" type="text" style="width: 50px"></span>
									<div id="other-assignments" style="font-weight: normal"> </div>				
								</div>
							</th> </tr>
							
						</table>
					</div>
				</div>
			</div>
			
			<div class="card">
			
				<div class="btn-close" onclick="collapseCard('additionalOptions')">
					<h2 style="margin: 0px">Grading Options
						<span style="float: right"><i class="fa fa-angle-down"></i></span>
					</h2>
				</div>
			
				<div id="additionalOptions" class="card-contents" style="margin-top:10px">
					<table>
						<tr> <th>						  
							<label for="penalty">Penalty Per Day Late</label>
							<input id="penalty" name="penalty" type="text" value="0.00">
							
							
							<div id="extra-credit-container" class="toggle-container">
								<label for="extracredit">Extra Credit</label>
								<label class="switch">
									<input id="extracredit" type="checkbox" name="extracredit">
									<span class="slider round"></span>
								</label>
							</div>
						</th> </tr>
					</table>
				</div>
			</div>
			
		</div>

		<div id="team-pickers">

		</div>
	
	</section>
</body>

{% endblock %}

{% block scripts %}
    <!-- JQuery -->
    <script src="//code.jquery.com/jquery-1.12.4.js"></script>
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
	
	<script src="//cdn.jsdelivr.net/npm/jquery-ui-timepicker-addon@1.6.3/dist/jquery-ui-sliderAccess.js"></script>
	<script src="//cdn.jsdelivr.net/npm/jquery-ui-timepicker-addon@1.6.3/dist/jquery-ui-timepicker-addon.js"></script>
	
	<script type="text/javascript" src="{{ asset('js/toastr/toastr.js')}}"></script>

	<script src="{{ asset('js/cards.js') }}"></script>		
	<script src="{{ asset('js/validation.js') }}"></script>
	
    <script>
	
		var team_warning = false;
	
		$(document).ready(function() {
			$('#insert').on('click', function(){insertSection();});
			$('#student-picker').on('change', function(){addStudent();});
							
			$( "#opendatepicker" ).datetimepicker();
			$( "#closedatepicker" ).datetimepicker();
			$( "#cutoffdatepicker" ).datetimepicker();
			
			// show other assignment weights
			showAssignmentWeights();
						
			{% if assignment is not null %}
			populateForm();
			{% else %}

			{% for sct in sections %}
			addTeamCard(null, JSON.parse("{{sct|json_encode|e('js')}}"));
			{% endfor %}

			$('#weight').val(1);
			
			{% endif %}	

			{% if assignment is not null %}
			var warned = 0;
			$('#delete-btn').on('click', function(){
			
				if(warned == 1){					
					window.location = "{{path('assignment_delete', {'sectionId': assignment.section.id, 'assignmentId': assignment.id})}}";
					
				} else {
					$('#delete-warning').html("Are you sure?<br/>Click again to delete.");
				}
			
				warned++;
			});

			$('#subs-btn').on('click', function(){

				$(this).hide();
						
				var formData = new FormData();
				formData.append('assignment', {{assignment.id}});
								
				/* AJAX POST */
				$.ajax({
					type: "POST",
					url: "{{path('assignment_clearsubs')}}",
					data: formData,
					processData: false,
					contentType: false,
					async: true,
					success: function(data){
						console.log(data);
						toastr.info(data.result + " submissions deleted successfully");
					},
					error: function(data){
						console.log(data['responseText']);
						toastr.warning("Could not delete submissions");
						$('#subs-btn').show();
					}
				});

			});

			$('#trials-btn').on('click', function(){

				$(this).hide();
						
				var formData = new FormData();
				formData.append('assignment', {{assignment.id}});
								
				/* AJAX POST */
				$.ajax({
					type: "POST",
					url: "{{path('assignment_cleartrials')}}",
					data: formData,
					processData: false,
					contentType: false,
					async: true,
					success: function(data){
						console.log(data);
						toastr.info("Saved code deleted successfully");
					},
					error: function(data){
						console.log(data['responseText']);
						toastr.warning("Saved code could not be deleted");
						$('#trials-btn').show();
					}
				});

			});

			{% endif %}
			
			
			/* Client-Side Field Validation */			
			$('#save-btn').on('click', function(){
				
				$('#delete-warning').html("");
				
				// compare dates
				if ($('#closedatepicker').datepicker('getDate') < $('#opendatepicker').datepicker('getDate')){
					setInvalid($('#closedatepicker'));
					setInvalid($('#opendatepicker'));
					$('#delete-warning').append("Close date must be after open date<br><br>");
					return false;
				} else {
					setValid($('#closedatepicker'));
					setValid($('#opendatepicker'));
				}
				
				if ($('#cutoffdatepicker').val() != '' && $('#cutoffdatepicker').datepicker('getDate') < $('#closedatepicker').datepicker('getDate')){
					setInvalid($('#cutoffdatepicker'));
					$('#delete-warning').append("Cutoff date must be after close date<br><br>");
					return false;
				} else {
					setValid($('#cutoffdatepicker'));
				}
				
				// weight
				var wght = new Number($('#weight').val());
				if($('#weight').val() === '' || ($('#weight').val() != '' && (wght < 0 || wght % 1 != 0))){						
					setInvalid($('#weight'));
					$('#delete-warning').append("Weight must be a positive integer<br><br>");
					return false;
				} else {
					setValid($('#weight'));				
				}
				
				// penalty per day
				var pen = new Number($('#penalty').val());
				if($('#penalty').val() === '' || !(pen >= 0.0 && pen <= 1.0)){						
					setInvalid($('#penalty'));
					
					$('#delete-warning').append("Penalty per day late must be a value between 0 and 1<br><br>");
					
					return false;
				} else {
					setValid($('#penalty'));				
				}
				
				// get JSON structure for the teams
				var teams = getTeams();					
				
				// check to see if this button is allowed to be pressed
				if($(this).prop('disabled')){
					return false;
				} else {
					$(this).prop('disabled', true);
				}

				/* Post to the Symfony Route */
				$.post( "{{path('assignment_modify')}}", {				
					
					name: $.trim($('#name').val()),
					description: "",
					
					open_time: $('#opendatepicker').val(),
					close_time: $('#closedatepicker').val(),
					cutoff_time: $('#cutoffdatepicker').val(),
					
					penalty: $('#penalty').val(),
					
					is_extra_credit: $('#extracredit').is(':checked'),
					weight: $('#weight').val(),
					
					section: {{section.id}},
					assignment: {% if assignment is not null %} {{assignment.id}} {% else %} 0 {% endif %},
					
					teams: JSON.stringify(teams),
					
				}, function(data) {			
					console.log(data);					
					window.location = "{{path('section', {'sectionId': section.id})}}";
					
				}).fail(function(data) {				
					alert(data["responseText"]);					
					$('#save-btn').prop('disabled', false);				
				});				
			});

			$('#cancel-btn').click(() => {
				window.history.back();
			});
		});

	</script>
	
	<script> 
	
	function showAssignmentWeights(){
	
		var assignments = JSON.parse('{{ section.assignments.toArray()|json_encode|raw }}');
				
		if(assignments.length < 1){
			return;
		}
		
		console.log(assignments);
				
		var str = "<b>Assignment Weights for {{section.name}}</b><ul style='margin: 0; padding-left: 10px; list-style-type: none'>";
		for(var i=0; i<assignments.length; i++){
			str += "<li>" + assignments[i].name + ": " +assignments[i].weight +"</li>";

		}
		str += "</ul>";
		$('#other-assignments').html(str);
	}


	function getTeams(){
					
		var asgnteams = {};

		$('.sect-card').each(function( par ) {

			var teams = [];

			$(this).find('.team').each(function( index ) {

				var team = {};
			
				team.name = "N/A";
				team.id = $(this).attr('id') ? parseInt($(this).attr('id')) : 0;
				team.members = [];

				$(this).children('.user').each(function(index2) {
					team.members.push($(this).prop('id'));
				});
				
				teams.push(team);
			});

			asgnteams[$(this).attr('data-sectionid')] = teams;
		});
		
		return asgnteams;
	}
	
	function validateTeams(card){
	
		if($(card).find('.team-pool .user').length == 0){
			return true;
		} else {
			return false;
		}
	}

	function addTeamCard(assignment = null, section = null){

		if(assignment == null){
			assignment = {};
			assignment.id = $('.sect-card').length+1;
			assignment.section_id = section.id;
			assignment.takers = section.takers;
			assignment.teams = [];
		}

		var teamHTML = `<div class="card sect-card" data-sectionid="` + assignment.section_id + `">
		
							<div class="btn-close" onclick="collapseCard('teams-` + assignment.id + `')">
								<h2 style="margin: 0px">` + escapeHTML(section.name) + `
									<span style="float: right"><i class="fa fa-angle-down"></i></span>
								</h2>
							</div>
						
							<div id="teams-` + assignment.id + `" class="card-contents" style="margin-top: 0px">
								<div>
									<div class="team-pool"></div>						
									<div class="team-container"></div>
								</div>
							</div>
						</div>
						`;


		$('#team-pickers').append(teamHTML);

		var teamCardId = "#teams-" + assignment.id;

		// add the teams
		var takers = assignment.takers;
		var teams = assignment.teams;
	
		if(teams.length > 0){
			for(var i=0; i<takers.length; i++){
				$(teamCardId).find('.team-pool').append("<div class='user' id='"+takers[i].id+"' data-sectionid='" + assignment.section_id + "'>"+escapeHTML(takers[i].full_name) +"</div>");
			}
		} else {
			for(var i=0; i<takers.length; i++){
				
				var newTeam = $("<div>", {"class": "team", "id": 0});
		
				$(teamCardId).find('.team-container').append(newTeam);
				
				var newUser = $("<div>", {"class": "user", "id": takers[i].id, "data-sectionid": assignment.section_id});
				newUser.html(escapeHTML(takers[i].full_name));
				
				newTeam.append(newUser);
			}
		}

		for(var i=0; i<teams.length; i++){
			for(var j=0; j<teams[i].users.length; j++){
				$(teamCardId).find('.team-pool #'+teams[i].users[j].id).remove();
			}

			var newTeam = $("<div>", {"class": "team", "id": teams[i].id});
		
			$(teamCardId).find('.team-container').append(newTeam);
						
			for(var j=0; j<teams[i].users.length; j++){
			
				var newUser = $("<div>", {"class": "user", "id": teams[i].users[j].id, "data-sectionid": assignment.section_id});
				newUser.html(teams[i].users[j].first_name + " " + teams[i].users[j].last_name);
				
				newTeam.append(newUser);			
			}			
		}
	
		$(teamCardId).find('.user').draggable({
			revert: true,
			revertDuration: 0,
			start: function() {
			
				var newTeam = $("<div>", {"class": "team", "id": 0});
								
				newTeam.droppable({
					accept: '.user',

					drop: function(event, ui) {				

						if($(ui.draggable[0]).attr('data-sectionid') != assignment.section_id){
							return;	
						}

						$(this).append($(ui.draggable));								
					}
				});				
			
				$(teamCardId).find('.team-container').append(newTeam);
			},
			stop: function() {				
				$(teamCardId).find(".team:not(:has(.user))").remove();
			}
		});
		
		$(teamCardId).find('.user').contextmenu(function(event) {
			$(this).appendTo($(teamCardId).find('.team-pool'));
			$(teamCardId).find(".team:not(:has(.user))").remove();
			
			return false;
		});

		$(teamCardId).find('.team').droppable({
			accept: '.user',

			drop: function(event, ui) {				

				if($(ui.draggable[0]).attr('data-sectionid') != assignment.section_id){
					return;	
				}

				$(this).append($(ui.draggable));								
			}		
		});

		$(teamCardId).find('.team-pool').droppable({
			accept: '.user',
			drop: function(event, ui){

				if($(ui.draggable[0]).attr('data-sectionid') != assignment.section_id){
					return;	
				}

				$(this).append($(ui.draggable));					
			}
		})
	}

	</script>
		
		
	{% if assignment is not null %}
	<script>
	function populateForm(){

		// set the name
		$('#name').val("{{assignment.name}}");
		
		// set the description
		$('#description').val("{{assignment.description}}");
		
		// set the open date
		$('#opendatepicker').val("{{assignment.start_time|date('m/d/Y H:i')}}");		
		
		// set the close date
		$('#closedatepicker').val("{{assignment.end_time|date('m/d/Y H:i')}}");
		
		// set the cuttoff date
		$('#cutoffdatepicker').val("{{assignment.cutoff_time|date('m/d/Y H:i')}}");
		
		// set the weight
		$('#weight').val({{assignment.weight}});
		
		// set the checkbox
		$('#penalty').val({{assignment.penalty_per_day}});
		
		// set the checkbox
		$('#extracredit').attr('checked', {% if assignment.is_extra_credit %} true {% else %} false {% endif %});
		
		// set the teams
	//	addTeamCard(JSON.parse("{{assignment|json_encode|e('js')}}"));

		{% for asg in assignments %}
		addTeamCard(JSON.parse("{{asg|json_encode|e('js')}}"), JSON.parse("{{asg.section|json_encode|e('js')}}"));
		{% endfor %}

		
	}
	
	</script>
	{% endif %}
	
{% endblock %}
